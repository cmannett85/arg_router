# Runs more expensive, less likely to fail tests, when merging to main_v2
name: Merge to main_v2 Checker

on:
  pull_request:
    branches: [ main_v2 ]

env:
  SKIP_COVERAGE_UPDATE: 1
  BUILD_DIR: ${{ github.workspace }}/build
  INSTALL_DIR: ${{ github.workspace }}/install
  PACKAGE_BUILD_DIR: ${{ github.workspace }}/package_build
  DOWNLOAD_DIR: ${{ github.workspace }}/download

jobs:
  # Skip jobs based on what files have changed
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      merge_checker: ${{ steps.filter.outputs.merge_checker }}
      source_tests_and_examples: ${{ steps.filter.outputs.source_tests_and_examples }}
      docs: ${{ steps.filter.outputs.docs }}
      vcpkg_test_project: ${{ steps.filter.outputs.vcpkg_test_project }}
      conan_test_project: ${{ steps.filter.outputs.conan_test_project }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: .github/filters.yml

  # Run the more esoteric/likely to succeed unit tests when merging to main
  sanitizer_unit_tests:
    runs-on: ubuntu-22.04
    needs: changes
    if: |
      needs.changes.outputs.merge_checker == 'true' ||
      needs.changes.outputs.source_tests_and_examples == 'true'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Update packages
      run: |
        sudo apt update
        sudo apt install ninja-build

    - uses: ./.github/workflows/bootstrap_vcpkg
      with:
        token: "${{ secrets.GITHUB_TOKEN }}"

    - name: Build
      timeout-minutes: 30
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake ${{ github.workspace }} -G "Ninja" -DCMAKE_CXX_COMPILER=clang++-14 -DENABLE_SANITIZERS=ON -DDEATH_TEST_PARALLEL=2
        cmake --build . --target arg_router_test

    - name: Run unit tests under ASan/UBSan
      timeout-minutes: 45
      run: |
        cd ${{ env.BUILD_DIR }}/test
        ./arg_router_test -l test_suite

  gcc_compiler_test:
    runs-on: ubuntu-22.04
    needs: changes
    if: |
      needs.changes.outputs.merge_checker == 'true' ||
      needs.changes.outputs.source_tests_and_examples == 'true'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Update packages
      run: |
        sudo apt update
        sudo apt install ninja-build

    - uses: ./.github/workflows/bootstrap_vcpkg
      with:
        token: "${{ secrets.GITHUB_TOKEN }}"

    - name: Build
      timeout-minutes: 30
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake ${{ github.workspace }} -G "Ninja" -DCMAKE_CXX_COMPILER=g++-12 -DDEATH_TEST_PARALLEL=2
        cmake --build . --target arg_router_test examples

    - name: Run unit tests
      timeout-minutes: 30
      run: |
        cd ${{ env.BUILD_DIR }}/test
        ./arg_router_test -l test_suite

  thirtytwobit_gcc_compiler_test:
    runs-on: ubuntu-22.04
    needs: changes
    if: |
      needs.changes.outputs.merge_checker == 'true' ||
      needs.changes.outputs.source_tests_and_examples == 'true'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Update packages
      run: |
        sudo apt update
        sudo apt install ninja-build g++-multilib

    - uses: ./.github/workflows/bootstrap_vcpkg
      with:
        token: "${{ secrets.GITHUB_TOKEN }}"

    - name: Build
      timeout-minutes: 30
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake ${{ github.workspace }} -G "Ninja" -DCMAKE_CXX_COMPILER=g++-11 -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_EXE_LINKER_FLAGS=-m32 -DVCPKG_OVERLAY_TRIPLETS=${{ github.workspace }}/cmake/triplets -DVCPKG_TARGET_TRIPLET=x86-linux -DDEATH_TEST_PARALLEL=2
        cmake --build . --target arg_router_test examples

    - name: Run unit tests
      timeout-minutes: 30
      run: |
        cd ${{ env.BUILD_DIR }}/test
        ./arg_router_test -l test_suite

  windows_clang_cl_compiler_tests:
    runs-on: windows-2022
    needs: changes
    if: |
      needs.changes.outputs.merge_checker == 'true' ||
      needs.changes.outputs.source_tests_and_examples == 'true'

    # Use the CMake that ships with VS to match locally built versions
    env:
      CMAKE_EXE: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe"
      CMD_BUILD_DIR: ${{ github.workspace }}\\build

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - uses: ./.github/workflows/bootstrap_vcpkg
      with:
        token: "${{ secrets.GITHUB_TOKEN }}"

    - name: Build
      timeout-minutes: 60
      shell: cmd
      run: |
        call "C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Auxiliary/Build/vcvarsall.bat" x64
        mkdir ${{ env.CMD_BUILD_DIR }}
        cd ${{ env.CMD_BUILD_DIR }}
        "${{ env.CMAKE_EXE }}" ${{ github.workspace }} -G "Ninja" -DVCPKG_TARGET_TRIPLET:STRING="x64-windows-static" -DCMAKE_CXX_COMPILER:FILEPATH="C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Tools/Llvm/x64/bin/clang-cl.exe" -DDEATH_TEST_PARALLEL=2
        "${{ env.CMAKE_EXE }}" --build . --target arg_router_test examples

    - name: Run unit tests
      timeout-minutes: 30
      run: |
        cd ${{ env.BUILD_DIR }}/test
        ./arg_router_test.exe -l test_suite

    - name: Test install
      run: |
        & "C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Auxiliary/Build/vcvarsall.bat" x64
        cd ${{ env.BUILD_DIR }}
        & "${{ env.CMAKE_EXE }}" --install . --prefix ${{ env.INSTALL_DIR }}
        cd ${{ env.INSTALL_DIR }}
        Test-Path -Path "${{ env.INSTALL_DIR }}/include/arg_router/version.hpp" -PathType Leaf
        Test-Path -Path "${{ env.INSTALL_DIR }}/include/arg_router/README.md" -PathType Leaf
        Test-Path -Path "${{ env.INSTALL_DIR }}/include/arg_router/LICENSE" -PathType Leaf
        Test-Path -Path "${{ env.INSTALL_DIR }}/share/arg_router/arg_router.cmake" -PathType Leaf
        Test-Path -Path "${{ env.INSTALL_DIR }}/share/arg_router/arg_router-config.cmake" -PathType Leaf
        Test-Path -Path "${{ env.INSTALL_DIR }}/share/arg_router/arg_router-config-version.cmake" -PathType Leaf
        Test-Path -Path "${{ env.INSTALL_DIR }}/share/arg_router/translation_generator.cmake" -PathType Leaf
        Test-Path -Path "${{ env.INSTALL_DIR }}/share/arg_router/translation_generator_script.cmake" -PathType Leaf

    - name: Test CMake package integrity
      run: |
        & "C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Auxiliary/Build/vcvarsall.bat" x64
        mkdir ${{ env.PACKAGE_BUILD_DIR }}
        cd ${{ env.PACKAGE_BUILD_DIR }}
        & "${{ env.CMAKE_EXE }}" ${{ github.workspace }}/ci/package_test_project -G "Visual Studio 17 2022" -A x64 -T "ClangCl" -DVCPKG_TARGET_TRIPLET:STRING="x64-windows-static" -DCMAKE_CXX_COMPILER:FILEPATH="C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Tools/Llvm/x64/bin/clang-cl.exe" -DCMAKE_C_COMPILER:FILEPATH="C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Tools/Llvm/x64/bin/clang-cl.exe" -DCMAKE_RC_COMPILER:FILEPATH="C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Tools/Llvm/x64/bin/llvm-rc.exe" -DCMAKE_PREFIX_PATH=${{ env.INSTALL_DIR }}
        & "${{ env.CMAKE_EXE }}" --build . -- /v:n

  macos_compiler_tests:
    runs-on: macos-12
    needs: changes
    if: |
      needs.changes.outputs.merge_checker == 'true' ||
      needs.changes.outputs.source_tests_and_examples == 'true'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Update packages
      run: |
        brew install clang-format

    - uses: ./.github/workflows/bootstrap_vcpkg
      with:
        token: "${{ secrets.GITHUB_TOKEN }}"

    - name: Build
      timeout-minutes: 30
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake ${{ github.workspace }} -DDEATH_TEST_PARALLEL=3
        cmake --build . --target arg_router_test examples -j3

    - name: Run unit tests
      timeout-minutes: 30
      run: |
        cd ${{ env.BUILD_DIR }}/test
        ./arg_router_test -l test_suite

    - name: Test install
      run: |
        cd ${{ env.BUILD_DIR }}
        cmake --install . --prefix ${{ env.INSTALL_DIR }}
        cd ${{ env.INSTALL_DIR }}
        [[ -f "./include/arg_router/version.hpp" ]]
        [[ -f "./include/arg_router/README.md" ]]
        [[ -f "./include/arg_router/LICENSE" ]]
        [[ -f "./share/arg_router/arg_router.cmake" ]]
        [[ -f "./share/arg_router/arg_router-config.cmake" ]]
        [[ -f "./share/arg_router/arg_router-config-version.cmake" ]]
        [[ -f "./share/arg_router/translation_generator.cmake" ]]
        [[ -f "./share/arg_router/translation_generator_script.cmake" ]]

    - name: Test CMake package integrity
      run: |
        mkdir ${{ env.PACKAGE_BUILD_DIR }}
        cd ${{ env.PACKAGE_BUILD_DIR }}
        cmake ${{ github.workspace }}/ci/package_test_project -DCMAKE_PREFIX_PATH=${{ env.INSTALL_DIR }}
        cmake --build .

  # Test vcpkg package is acquired and accessible
  vcpkg_test_package:
    runs-on: ubuntu-22.04
    needs: changes
    if: |
      needs.changes.outputs.merge_checker == 'true' ||
      needs.changes.outputs.vcpkg_test_project == 'true'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Update packages
      run: |
        sudo apt update
        sudo apt install ninja-build

    - uses: ./.github/workflows/bootstrap_vcpkg
      with:
        token: "${{ secrets.GITHUB_TOKEN }}"

    - name: Configure Git
      run: |
        git config --global user.email "arg_router.ci@gha.com"
        git config --global user.name "arg_router CI"

    - name: Build
      timeout-minutes: 10
      run: |
        ${{ github.workspace }}/ci/vcpkg_package_updater.sh ${{ github.sha }}

  vcpkg_test_package_win:
    runs-on: windows-2022
    needs: changes
    if: |
      needs.changes.outputs.merge_checker == 'true' ||
      needs.changes.outputs.vcpkg_test_project == 'true'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - uses: ./.github/workflows/bootstrap_vcpkg
      with:
        token: "${{ secrets.GITHUB_TOKEN }}"

    - name: Configure Git
      run: |
        git config --global user.email "arg_router.ci@gha.com"
        git config --global user.name "arg_router CI"

    - name: Build
      timeout-minutes: 10
      shell: pwsh
      run: |
        & 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Launch-VsDevShell.ps1'
        & ${{ github.workspace }}/ci/vcpkg_package_updater.ps1 ${{ github.sha }}

  # Test Conan package is acquired and accessible for C++17
  # conan_test_package_17:
  #   runs-on: ubuntu-22.04
  #   needs: changes
  #   if: |
  #     needs.changes.outputs.merge_checker == 'true' ||
  #     needs.changes.outputs.conan_test_project == 'true'

  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: ./.github/workflows/conan_setup
  #     with:
  #       version: "17"
  #       build_dir: "${{ env.BUILD_DIR }}"

  # # Test Conan package is acquired and accessible for C++20
  # conan_test_package_20:
  #   runs-on: ubuntu-22.04
  #   needs: changes
  #   if: |
  #     needs.changes.outputs.merge_checker == 'true' ||
  #     needs.changes.outputs.conan_test_project == 'true'

  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: ./.github/workflows/conan_setup
  #     with:
  #       version: "20"
  #       build_dir: "${{ env.BUILD_DIR }}"
