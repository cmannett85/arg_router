# Runs more expensive, less likely to fail tests, when merging to main
name: Merge to main Checker

on:
  pull_request:
    branches: [ main ]

env:
  SKIP_COVERAGE_UPDATE: 1
  NUGET_SOURCE_URL: "https://nuget.pkg.github.com/cmannett85/index.json"
  VCPKG_BINARY_SOURCES: 'clear;nuget,vcpkg-cache,readwrite'
  BUILD_DIR: ${{ github.workspace }}/build
  INSTALL_DIR: ${{ github.workspace }}/install
  PACKAGE_BUILD_DIR: ${{ github.workspace }}/package_build
  DOWNLOAD_DIR: ${{ github.workspace }}/download

jobs:
  # Run the more esoteric/likely to succeed unit tests when merging to main
  sanitizer_unit_tests:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Update packages
      run: |
        sudo apt update
        sudo apt install ninja-build

    - name: Bootstrap vcpkg to build the NuGet client
      run: |
        ./external/vcpkg/bootstrap-vcpkg.sh -disableMetrics

    - name: Configure NuGet client
      run: |
        mono `./external/vcpkg/vcpkg fetch nuget | tail -n 1` \
          sources add \
          -source ${{ env.NUGET_SOURCE_URL }} \
          -storepasswordincleartext \
          -name "vcpkg-cache" \
          -username "cmannett85" \
          -password "${{ secrets.GITHUB_TOKEN }}"
        mono `./external/vcpkg/vcpkg fetch nuget | tail -n 1` \
          setapikey "${{ secrets.GITHUB_TOKEN }}" \
          -source ${{ env.NUGET_SOURCE_URL }}

    - name: Build
      timeout-minutes: 30
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake ${{ github.workspace }} -G "Ninja" -DCMAKE_CXX_COMPILER=clang++-14 -DENABLE_SANITIZERS=ON -DDEATH_TEST_PARALLEL=2
        cmake --build . --target arg_router_test

    - name: Run unit tests under ASan/UBSan
      timeout-minutes: 30
      run: |
        cd ${{ env.BUILD_DIR }}/test
        ./arg_router_test -l test_suite

  gcc_compiler_test:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Update packages
      run: |
        sudo apt update
        sudo apt install ninja-build

    - name: Bootstrap vcpkg to build the NuGet client
      run: |
        ./external/vcpkg/bootstrap-vcpkg.sh -disableMetrics

    - name: Configure NuGet client
      run: |
        mono `./external/vcpkg/vcpkg fetch nuget | tail -n 1` \
          sources add \
          -source ${{ env.NUGET_SOURCE_URL }} \
          -storepasswordincleartext \
          -name "vcpkg-cache" \
          -username "cmannett85" \
          -password "${{ secrets.GITHUB_TOKEN }}"
        mono `./external/vcpkg/vcpkg fetch nuget | tail -n 1` \
          setapikey "${{ secrets.GITHUB_TOKEN }}" \
          -source ${{ env.NUGET_SOURCE_URL }}

    - name: Build
      timeout-minutes: 30
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake ${{ github.workspace }} -G "Ninja" -DCMAKE_CXX_COMPILER=g++-12 -DDEATH_TEST_PARALLEL=2
        cmake --build . --target arg_router_test cpp17_examples cpp20_examples

    - name: Run unit tests
      timeout-minutes: 30
      run: |
        cd ${{ env.BUILD_DIR }}/test
        ./arg_router_test -l test_suite

  thirtytwobit_gcc_compiler_test:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Update packages
      run: |
        sudo apt update
        sudo apt install ninja-build g++-multilib

    - name: Bootstrap vcpkg to build the NuGet client
      run: |
        ./external/vcpkg/bootstrap-vcpkg.sh -disableMetrics

    - name: Configure NuGet client
      run: |
        mono `./external/vcpkg/vcpkg fetch nuget | tail -n 1` \
          sources add \
          -source ${{ env.NUGET_SOURCE_URL }} \
          -storepasswordincleartext \
          -name "vcpkg-cache" \
          -username "cmannett85" \
          -password "${{ secrets.GITHUB_TOKEN }}"
        mono `./external/vcpkg/vcpkg fetch nuget | tail -n 1` \
          setapikey "${{ secrets.GITHUB_TOKEN }}" \
          -source ${{ env.NUGET_SOURCE_URL }}

    - name: Build
      timeout-minutes: 30
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake ${{ github.workspace }} -G "Ninja" -DCMAKE_CXX_COMPILER=g++-11 -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_EXE_LINKER_FLAGS=-m32 -DVCPKG_OVERLAY_TRIPLETS=${{ github.workspace }}/cmake/triplets -DVCPKG_TARGET_TRIPLET=x86-linux -DDEATH_TEST_PARALLEL=2
        cmake --build . --target arg_router_test cpp17_examples cpp20_examples

    - name: Run unit tests
      timeout-minutes: 30
      run: |
        cd ${{ env.BUILD_DIR }}/test
        ./arg_router_test -l test_suite

  windows_clang_cl_compiler_tests:
    runs-on: windows-2022

    # Use the CMake that ships with VS to match locally built versions
    env:
      CMAKE_EXE: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe"
      CMD_BUILD_DIR: ${{ github.workspace }}\\build

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Bootstrap vcpkg to build the NuGet client
      run: |
        ./external/vcpkg/bootstrap-vcpkg.bat -disableMetrics

    - name: Configure NuGet client
      run: |
        [array] $output = ./external/vcpkg/vcpkg.exe fetch nuget
        & $output[-1] sources add -source ${{ env.NUGET_SOURCE_URL }} -storepasswordincleartext -name "vcpkg-cache" -username "cmannett85" -password "${{ secrets.GITHUB_TOKEN }}"
        & $output[-1] setapikey "${{ secrets.GITHUB_TOKEN }}" -source ${{ env.NUGET_SOURCE_URL }}

    - name: Build
      timeout-minutes: 30
      shell: cmd
      run: |
        call "C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Auxiliary/Build/vcvarsall.bat" x64
        mkdir ${{ env.CMD_BUILD_DIR }}
        cd ${{ env.CMD_BUILD_DIR }}
        "${{ env.CMAKE_EXE }}" ${{ github.workspace }} -G "Ninja" -DVCPKG_TARGET_TRIPLET:STRING="x64-windows-static" -DCMAKE_CXX_COMPILER:FILEPATH="C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Tools/Llvm/x64/bin/clang-cl.exe" -DDEATH_TEST_PARALLEL=2
        "${{ env.CMAKE_EXE }}" --build . --target arg_router_test cpp17_examples cpp20_examples

    - name: Run unit tests
      timeout-minutes: 30
      run: |
        cd ${{ env.BUILD_DIR }}/test
        ./arg_router_test.exe -l test_suite

    - name: Test install
      run: |
        & "C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Auxiliary/Build/vcvarsall.bat" x64
        cd ${{ env.BUILD_DIR }}
        & "${{ env.CMAKE_EXE }}" --install . --prefix ${{ env.INSTALL_DIR }}
        cd ${{ env.INSTALL_DIR }}
        Test-Path -Path "${{ env.INSTALL_DIR }}/include/arg_router/version.hpp" -PathType Leaf
        Test-Path -Path "${{ env.INSTALL_DIR }}/include/arg_router/README.md" -PathType Leaf
        Test-Path -Path "${{ env.INSTALL_DIR }}/include/arg_router/LICENSE" -PathType Leaf
        Test-Path -Path "${{ env.INSTALL_DIR }}/share/arg_router/arg_router.cmake" -PathType Leaf
        Test-Path -Path "${{ env.INSTALL_DIR }}/share/arg_router/arg_router-config.cmake" -PathType Leaf
        Test-Path -Path "${{ env.INSTALL_DIR }}/share/arg_router/arg_router-config-version.cmake" -PathType Leaf

    - name: Test CMake package integrity
      run: |
        & "C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Auxiliary/Build/vcvarsall.bat" x64
        mkdir ${{ env.PACKAGE_BUILD_DIR }}
        cd ${{ env.PACKAGE_BUILD_DIR }}
        & "${{ env.CMAKE_EXE }}" ${{ github.workspace }}/scripts/ci/package_test_project -G "Visual Studio 17 2022" -A x64 -T "ClangCl" -DVCPKG_TARGET_TRIPLET:STRING="x64-windows-static" -DCMAKE_CXX_COMPILER:FILEPATH="C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Tools/Llvm/x64/bin/clang-cl.exe" -DCMAKE_C_COMPILER:FILEPATH="C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Tools/Llvm/x64/bin/clang-cl.exe" -DCMAKE_RC_COMPILER:FILEPATH="C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Tools/Llvm/x64/bin/llvm-rc.exe" -DCMAKE_PREFIX_PATH=${{ env.INSTALL_DIR }}
        & "${{ env.CMAKE_EXE }}" --build . -- /v:n

  macos_compiler_tests:
    runs-on: macos-12

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Update packages
      run: |
        brew install clang-format

    - name: Bootstrap vcpkg to build the NuGet client
      run: |
        ./external/vcpkg/bootstrap-vcpkg.sh -disableMetrics

    - name: Configure NuGet client
      run: |
        mono `./external/vcpkg/vcpkg fetch nuget | tail -n 1` \
          sources add \
          -source ${{ env.NUGET_SOURCE_URL }} \
          -storepasswordincleartext \
          -name "vcpkg-cache" \
          -username "cmannett85" \
          -password "${{ secrets.GITHUB_TOKEN }}"
        mono `./external/vcpkg/vcpkg fetch nuget | tail -n 1` \
          setapikey "${{ secrets.GITHUB_TOKEN }}" \
          -source ${{ env.NUGET_SOURCE_URL }}

    - name: Build
      timeout-minutes: 30
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake ${{ github.workspace }} -DDEATH_TEST_PARALLEL=3
        cmake --build . --target arg_router_test cpp17_examples cpp20_examples -j3

    - name: Run unit tests
      timeout-minutes: 30
      run: |
        cd ${{ env.BUILD_DIR }}/test
        ./arg_router_test -l test_suite

    - name: Test install
      run: |
        cd ${{ env.BUILD_DIR }}
        cmake --install . --prefix ${{ env.INSTALL_DIR }}
        cd ${{ env.INSTALL_DIR }}
        [[ -f "./include/arg_router/version.hpp" ]]
        [[ -f "./include/arg_router/README.md" ]]
        [[ -f "./include/arg_router/LICENSE" ]]
        [[ -f "./share/arg_router/arg_router.cmake" ]]
        [[ -f "./share/arg_router/arg_router-config.cmake" ]]
        [[ -f "./share/arg_router/arg_router-config-version.cmake" ]]

    - name: Test CMake package integrity
      run: |
        mkdir ${{ env.PACKAGE_BUILD_DIR }}
        cd ${{ env.PACKAGE_BUILD_DIR }}
        cmake ${{ github.workspace }}/scripts/ci/package_test_project -DCMAKE_PREFIX_PATH=${{ env.INSTALL_DIR }}
        cmake --build .

  # Test vcpkg package is acquired and accessible
  vcpkg_test_package:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Update packages
      run: |
        sudo apt update
        sudo apt install ninja-build

    - name: Bootstrap vcpkg to build the NuGet client
      run: |
        ./external/vcpkg/bootstrap-vcpkg.sh -disableMetrics

    - name: Configure NuGet client
      run: |
        mono `./external/vcpkg/vcpkg fetch nuget | tail -n 1` \
          sources add \
          -source ${{ env.NUGET_SOURCE_URL }} \
          -storepasswordincleartext \
          -name "vcpkg-cache" \
          -username "cmannett85" \
          -password "${{ secrets.GITHUB_TOKEN }}"
        mono `./external/vcpkg/vcpkg fetch nuget | tail -n 1` \
          setapikey "${{ secrets.GITHUB_TOKEN }}" \
          -source ${{ env.NUGET_SOURCE_URL }}

    - name: Build
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake ${{ github.workspace }}/scripts/ci/vcpkg_test_project -G "Ninja" -DCMAKE_CXX_STANDARD=20
        cmake --build .

  # Test Conan package can be created and accessible
  conan_test_package:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Update packages
      run: |
        sudo apt update
        sudo apt install ninja-build
        python -m pip install --upgrade pip conan

    - name: Build Conan package
      run: |
        conan profile detect --force
        conan create ${{ github.workspace }}

    - name: Build
      run: |
        conan install ${{ github.workspace }}/scripts/ci/conan_test_project --output-folder=${{ env.BUILD_DIR }} --build=missing
        cd ${{ env.BUILD_DIR }}
        cmake ${{ github.workspace }}/scripts/ci/conan_test_project/ -G "Ninja" -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
        cmake --build .
