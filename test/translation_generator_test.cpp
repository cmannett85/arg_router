// Copyright (C) 2023 by Camden Mannett.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

#include <arg_router/utility/string_view_ops.hpp>

#include "test_helpers.hpp"

#include <filesystem>
#include <fstream>

using namespace arg_router;
using namespace arg_router::utility::string_view_ops;

using namespace std::string_view_literals;
namespace fs = std::filesystem;

namespace
{
[[nodiscard]] std::string load_translation(std::string_view name)
{
    const auto path = fs::path{UNIT_TEST_BIN_DIR} / "translations" / (name + ".hpp"sv);
    auto stream = std::ifstream{path};
    return {std::istreambuf_iterator<char>{stream}, {}};
}
}  // namespace

BOOST_AUTO_TEST_SUITE(translation_generator_suite)

BOOST_AUTO_TEST_CASE(en_GB_test)
{
    const auto generated = load_translation("en_GB");
    const auto expected = R"(// Generated by CMake, do not modify manually
namespace arg_router::multi_lang
{
template <>
class translation<str<"en_GB">>
{
public:
    using force = str<"force">;
    using force_description = str<"Force overwrite existing files">;
    using destination = str<"DST">;
    using destination_description = str<"Destination directory">;
    using help = str<"help">;
    using help_description = str<"Display this help and exit">;
    using program_intro = str<"A simple file copier and mover.">;
    using program_addendum = str<"An example program for arg_router.">;
    using copy = str<"copy">;
    using copy_description = str<"Copy source files to destination">;
    using source = str<"SRC">;
    using sources_description = str<"Source file paths">;
    using move = str<"move">;
    using move_description = str<"Move source file to destination">;
    using source_description = str<"Source file path">;
};
}  // namespace arg_router::multi_lang
)"sv;

    BOOST_CHECK_EQUAL(generated, expected);
}

BOOST_AUTO_TEST_CASE(ja_test)
{
    const auto generated = load_translation("ja");
    const auto expected = R"--(// Generated by CMake, do not modify manually
namespace arg_router::multi_lang
{
template <>
class translation<str<"ja">>
{
public:
    using force = str<"強制">;
    using force_description = str<"既存のファイルを強制的に上書きする">;
    using destination = str<"先">;
    using destination_description = str<"宛先ディレクトリ">;
    using help = str<"ヘルプ">;
    using help_description = str<"このヘルプを表示して終了">;
    using program_intro = str<"ファイルをコピーおよび移動するためのシンプルなプログラム。">;
    using program_addendum = str<"「arg_router」のサンプルプログラム。">;
    using copy = str<"コピー">;
    using copy_description = str<"ソース ファイルを宛先にコピーする">;
    using source = str<"出典">;
    using sources_description = str<"ソース ファイルのパス">;
    using move = str<"移動">;
    using move_description = str<"ソース ファイルを宛先に移動する">;
    using source_description = str<"ソース ファイル パス">;

    using error_code_translations = std::tuple<
        std::pair<traits::integral_constant<error_code::unknown_argument>, str<"不明な引数">>,
        std::pair<traits::integral_constant<error_code::unhandled_arguments>, str<"未処理の引数">>,
        std::pair<traits::integral_constant<error_code::argument_has_already_been_set>, str<"引数はすでに設定されています">>,
        std::pair<traits::integral_constant<error_code::failed_to_parse>, str<"解析に失敗しました">>,
        std::pair<traits::integral_constant<error_code::no_arguments_passed>, str<"引数が渡されませんでした">>,
        std::pair<traits::integral_constant<error_code::minimum_value_not_reached>, str<"最小値に達していません">>,
        std::pair<traits::integral_constant<error_code::maximum_value_exceeded>, str<"最大値を超えました">>,
        std::pair<traits::integral_constant<error_code::minimum_count_not_reached>, str<"最小数に達していません">>,
        std::pair<traits::integral_constant<error_code::maximum_count_exceeded>, str<"最大数を超えました">>,
        std::pair<traits::integral_constant<error_code::unknown_argument_with_suggestion>, str<"不明な引数 {}。 { } という意味でしたか？">>,
        std::pair<traits::integral_constant<error_code::mode_requires_arguments>, str<"モードには引数が必要です">>,
        std::pair<traits::integral_constant<error_code::missing_required_argument>, str<"必要な引数がありません">>,
        std::pair<traits::integral_constant<error_code::too_few_values_for_alias>, str<"エイリアス値が少なすぎる">>,
        std::pair<traits::integral_constant<error_code::dependent_argument_missing>, str<"従属引数がありません (コマンドラインで必要なトークンの前に置く必要があります)">>,
        std::pair<traits::integral_constant<error_code::one_of_selected_type_mismatch>, str<"一度に許可される「One Of」引数は1つだけです">>,
        std::pair<traits::integral_constant<error_code::missing_value_separator>, str<"値の区切り文字が必要です">>
    >;
};
}  // namespace arg_router::multi_lang
)--"sv;

    BOOST_CHECK_EQUAL(generated, expected);
}

BOOST_AUTO_TEST_SUITE_END()
