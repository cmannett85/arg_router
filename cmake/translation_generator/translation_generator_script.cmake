### Copyright (C) 2023 by Camden Mannett.
### Distributed under the Boost Software License, Version 1.0.
### (See accompanying file LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

function(__ar_translation_body_generator)
    set(single_value_args LANGUAGE SOURCE OUTPUT_VAR)
    cmake_parse_arguments(ARGS "${option_args}" "${single_value_args}" "" ${ARGN})

    set(header "template <>
class translation<str<\"${ARGS_LANGUAGE}\">>
{
public:
")
    set(footer "};\n")

    set(error_code_header "\n    using error_code_translations = std::tuple<\n")
    set(error_code_footer "    >;\n")

    # Write the header
    set(output_data "${${ARGS_OUTPUT_VAR}}${header}")
    set(error_code_section FALSE)

    cmake_policy(PUSH)
    cmake_policy(SET CMP0007 NEW)

    # CMake ranges are inclusive for some reason, so we need to decrement the array length before
    # using in the for-loop
    file(STRINGS "${ARGS_SOURCE}" lines ENCODING UTF-8)
    list(LENGTH lines num_lines_over)
    math(EXPR num_lines "${num_lines_over}-1")

    foreach(line_index RANGE ${num_lines})
        list(GET lines ${line_index} line)

        # Skip comment lines
        string(SUBSTRING "${line}" 0 1 first_char)
        if((line STREQUAL "") OR (first_char STREQUAL "#"))
            continue()
        endif()

        if(line STREQUAL "[error_code]")
            set(error_code_section TRUE)
            string(APPEND output_data "${error_code_header}")
            continue()
        endif()

        # Split the string into key and value
        string(FIND "${line}" " = " div_pos)
        if(div_pos EQUAL -1)
            message(FATAL_ERROR "Malformed line: ${line}")
        endif()

        string(SUBSTRING "${line}" 0 ${div_pos} key)
        math(EXPR value_index "${div_pos}+3")
        string(SUBSTRING "${line}" ${value_index} -1 value)
        set(value_str "str<${value}>")

        # Process the entry data
        if(error_code_section)
            set(output_line "        std::pair<traits::integral_constant<error_code::${key}>, ${value_str}>")
            # Don't append a comma if this is the last tuple entry, won't compile in C++
            if(line_index EQUAL num_lines)
                string(APPEND output_line "\n")
            else()
                string(APPEND output_line ",\n")
            endif()
            string(APPEND output_data "${output_line}")
        else()
            set(output_line "    using ${key} = ${value_str};\n")
            string(APPEND output_data "${output_line}")
        endif()
    endforeach()

    cmake_policy(POP)

    # Write the footer and finish
    if(error_code_section)
        string(APPEND output_data "${error_code_footer}")
    endif()
    string(APPEND output_data "${footer}")

    set(${ARGS_OUTPUT_VAR} "${output_data}" PARENT_SCOPE)
endfunction()

# Script entry point
set(header "// Generated by CMake, do not modify manually
namespace arg_router::multi_lang
{\n")
set(footer "}  // namespace arg_router::multi_lang\n")

foreach(source ${SOURCES})
    get_filename_component(language_id "${source}" NAME_WLE)
    set(output_file "${OUTPUT_DIR}/${language_id}.hpp")
    set(output_data "${header}")

    __ar_translation_body_generator(
        LANGUAGE "${language_id}"
        SOURCE "${source}"
        OUTPUT_VAR output_data)
    string(APPEND output_data "${footer}")

    # Only write out the data if it differs from the existing
    if(EXISTS "${output_file}")
        file(READ "${output_file}" existing_data)
        if(NOT "${existing_data}" STREQUAL "${output_data}")
            message(STATUS "Generated ${language_id} translation file")
            file(WRITE "${output_file}" "${output_data}")
        endif()
    else()
        message(STATUS "Generated ${language_id} translation file")
        file(WRITE "${output_file}" "${output_data}")
    endif()
endforeach()
